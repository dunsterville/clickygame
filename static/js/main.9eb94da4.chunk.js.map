{"version":3,"sources":["components/Jumbotron1/Jumbotron1.js","components/GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron1","props","Jumbotron","fluid","Container","score","topScore","GameBoard","teamCards","teamData","map","team","Col","sm","Card","onClick","handleClick","id","style","justifyContent","alignItems","width","Body","alt","height","position","src","image","Row","App","state","shuffleTeams","sort","Math","random","handleAlreadyGuessed","newTeamList","resetTeamList","clicked","setState","handleNotGuessed","newScore","newtopScore","alreadyGuessed","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s3BAuBeA,EAnBI,SAACC,GAClB,OACF,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,4CACA,6BACA,8GAGA,6BACA,sCACUH,EAAMI,MADhB,iBACqCJ,EAAMK,a,wBCYhCC,EAtBG,SAACN,GACjB,IAAIO,EAAYP,EAAMQ,SAASC,KAAI,SAAAC,GACjC,OACE,kBAACC,EAAA,EAAD,CAAMC,GAAG,KACP,kBAACC,EAAA,EAAD,CAAMC,QAAS,kBAAMd,EAAMe,YAAYL,EAAKM,KAAMA,GAAIN,EAAKM,GAAIC,MAAO,CAACC,eAAgB,SAASC,WAAY,SAAUC,MAAO,UAC3H,kBAACP,EAAA,EAAKQ,KAAN,KACE,yBAAKC,IAAI,OAAOC,OAAO,QAAQH,MAAM,OAAOI,SAAS,SAASC,IAAKf,EAAKgB,cAMlF,OACE,kBAACvB,EAAA,EAAD,KACE,kBAACwB,EAAA,EAAD,KACGpB,EACD,gC,QC0DOqB,E,2MAxEfC,MAAQ,CACNrB,SAAWA,EACXJ,MAAO,EACPC,SAAU,G,EASZyB,aAAe,SAAAtB,GAEb,OAD0BA,EAASuB,MAAK,iBAAO,GAAMC,KAAKC,a,EAI5DC,qBAAuB,SAAAC,GAErB,IAAMC,EAAgBD,EAAY1B,KAAI,SAAAC,GAEpC,OADAA,EAAK2B,SAAU,EACR3B,KAGT,EAAK4B,SAAS,CACZ9B,SAAU,EAAKsB,aAAaM,GAC5BhC,MAAO,K,EAIXmC,iBAAmB,SAAAJ,GAAgB,IAAD,EACN,EAAKN,MAAxBzB,EADyB,EACzBA,MAAOC,EADkB,EAClBA,SAERmC,EAAWpC,EAAQ,EAEnBqC,EAAeD,EAAWnC,EAAYmC,EAAUnC,EAEtD,EAAKiC,SAAS,CACZ9B,SAAW,EAAKsB,aAAaK,GAC7B/B,MAAOoC,EACPnC,SAAUoC,K,EAKd1B,YAAc,SAAAC,GAEZ,IAAI0B,GAAiB,EACjBP,EAAc,EAAKN,MAAMrB,SAASC,KAAI,SAAAC,GAOxC,OANIA,EAAKM,KAAOA,IACVN,EAAK2B,UACP3B,EAAK2B,SAAU,EACfK,GAAiB,IAGdhC,KAGTgC,EAAiB,EAAKH,iBAAiBJ,GAAe,EAAKD,qBAAqBC,I,mFAnDhFQ,KAAKL,SAAS,CACZ9B,SAAUmC,KAAKb,aAAaa,KAAKd,MAAMrB,c,+BAsDvC,OACA,6BACA,kBAAC,EAAD,CAAYJ,MAAOuC,KAAKd,MAAMzB,MAAOC,SAAUsC,KAAKd,MAAMxB,WAC1D,kBAAC,EAAD,CAAWG,SAAUmC,KAAKd,MAAMrB,SAAUO,YAAa4B,KAAK5B,mB,GAnE9C6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9eb94da4.chunk.js","sourcesContent":["import React from 'react'\nimport {Jumbotron, Container} from 'react-bootstrap'\n\n\nconst Jumbotron1 = (props) => {\n  return (\n<Jumbotron fluid>\n  <Container>\n    <h1>Clicky Game </h1>\n    <br/>\n    <h5>\n    Click on an image to earn points, but don't click on any image more than once!\n    </h5>\n    <br/>\n    <h3>\n      Score: {props.score} | Top Score: {props.topScore}\n    </h3>\n  </Container>\n</Jumbotron>\n  \n  )\n}\n\nexport default Jumbotron1","import React from 'react'\nimport { Row, Container, Col } from 'react-bootstrap'\n// import ImageCard from '../../components/ImageCard'\nimport { Card } from 'react-bootstrap'\n\nconst GameBoard = (props) => {\n  let teamCards = props.teamData.map(team => {\n    return (\n      <Col  sm=\"4\" >\n        <Card onClick={() => props.handleClick(team.id)}  id={team.id} style={{justifyContent: 'center',alignItems: 'center', width: '18rem' }}>\n          <Card.Body>\n            <img alt=\"team\" height=\"200px\" width=\"auto\" position=\"center\" src={team.image} />\n          </Card.Body>\n        </Card>\n      </Col>\n    )\n  })\n  return (\n    <Container>\n      <Row>\n        {teamCards}\n        <br/>\n      </Row>\n    </Container>\n  )\n}\n\nexport default GameBoard","import React, {Component} from 'react';\nimport Jumbotron1 from './components/Jumbotron1'\nimport GameBoard from './components/GameBoard'\nimport teamData from './data/teamData.json'\n\nclass App extends Component {\n  \nstate = {\n  teamData : teamData,\n  score: 0,\n  topScore: 0\n}\n\ncomponentDidMount() {\n  this.setState({\n    teamData: this.shuffleTeams(this.state.teamData)\n  })\n}\n  \nshuffleTeams = teamData => {\n  const shuffledTeamsList = teamData.sort(() => (0.5 - Math.random()));\n  return shuffledTeamsList;\n}\n\nhandleAlreadyGuessed = newTeamList => {\n  \n  const resetTeamList = newTeamList.map(team => {\n    team.clicked = false\n    return team\n  })\n\n  this.setState({\n    teamData: this.shuffleTeams(resetTeamList),\n    score: 0\n  })\n}\n\nhandleNotGuessed = newTeamList => {\n  const {score, topScore} = this.state\n \n  const newScore = score + 1\n\n  const newtopScore = (newScore > topScore) ? newScore: topScore\n\n  this.setState({\n    teamData : this.shuffleTeams(newTeamList),\n    score: newScore,\n    topScore: newtopScore\n\n  })\n}\n\nhandleClick = id => {\n\n  let alreadyGuessed = false\n  let newTeamList = this.state.teamData.map(team => {\n    if (team.id === id) {\n      if(!team.clicked){\n        team.clicked = true\n        alreadyGuessed = true\n      }\n    }\n    return team\n  })\n  \n  alreadyGuessed ? this.handleNotGuessed(newTeamList) : this.handleAlreadyGuessed(newTeamList)\n}\n  \n  render () {\n    return(\n    <div>\n    <Jumbotron1 score={this.state.score} topScore={this.state.topScore}/>\n    <GameBoard teamData={this.state.teamData} handleClick={this.handleClick} />\n    \n  </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}